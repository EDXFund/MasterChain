// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/EDXFund/MasterChain/common/hexutil"
)

var _ = (*HeaderMarshal)(nil)

func  (h *Header) MarshalJSON() ([]byte, error) {

	var enc HeaderMarshal
	if(h.ShardId != 0xFFFF) {  //ShardChain
		enc.ShardId = h.ShardId
		enc.ParentHash = h.ParentHash
		enc.Coinbase = h.Coinbase

		enc.TxHash = h.TxHash
		enc.ReceiptHash = h.ReceiptHash
		enc.Bloom = h.Bloom
		enc.Difficulty = (*hexutil.Big)(h.Difficulty)
		enc.Number = (*hexutil.Big)(h.Number)
		enc.GasLimit = hexutil.Uint64(h.GasLimit)
		enc.GasUsed = hexutil.Uint64(h.GasUsed)
		enc.Time = (*hexutil.Big)(h.Time)
		enc.Extra = h.Extra
		enc.MixDigest = h.MixDigest
		enc.Nonce = h.Nonce
		enc.Hash = h.Hash()
	}else { //master chain
		
		enc.ShardId = h.ShardId
		enc.ParentHash = h.ParentHash
		enc.Coinbase = h.Coinbase
		enc.Root = h.Root
		enc.ShardHash = h.ShardHash
		enc.ShardMask = h.ShardMask
		enc.ShardEnabled = h.ShardEnabled
		enc.TxHash = h.TxHash
		enc.RjHash = h.RjHash
		enc.Bloom = h.Bloom
		enc.Difficulty = (*hexutil.Big)(h.Difficulty)
		enc.Number = (*hexutil.Big)(h.Number)
		enc.GasLimit = hexutil.Uint64(h.GasLimit)
		enc.GasUsed = hexutil.Uint64(h.GasUsed)
		enc.Time = (*hexutil.Big)(h.Time)
		enc.Extra = h.Extra
		enc.MixDigest = h.MixDigest
		enc.Nonce = h.Nonce
		enc.Hash = h.Hash()
	
	}
	return json.Marshal(&enc)
}

func (h *Header)UnmarshalJSON(input []byte) error {
	
	var dec HeaderUnmarshal
	
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if(dec.ShardId == 0xFFFF) {

		if dec.ShardHash == nil {
			return errors.New("missing required field 'ShardHash' for Header")
		}
		h.ShardHash = *dec.ShardHash
		h.ShardMask = dec.ShardMask
		if dec.ShardEnabled == nil {
			return errors.New("missing required field 'ShardEnabled' for Header")
		}
		h.ShardEnabled = *dec.ShardEnabled

		if dec.RjHash == nil {
			return errors.New("missing required field 'RjHash' for Header")
		}
		h.RjHash = *dec.RjHash
	}else {
		if dec.TxHash == nil {
			return errors.New("missing required field 'transactionsRoot' for Header")
		}
		h.TxHash = *dec.TxHash
		if dec.ReceiptHash == nil {
			return errors.New("missing required field 'receiptsRoot' for Header")
		}
		h.ReceiptHash = *dec.ReceiptHash
		if dec.Bloom == nil {
			return errors.New("missing required field 'logsBloom' for Header")
		}
		h.Bloom = *dec.Bloom
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash

	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.Coinbase = *dec.Coinbase

	
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)

	h.GasLimit = uint64(*dec.GasLimit)

	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra

	if dec.MixDigest == nil {
		return errors.New("missing required field 'mixHash' for Header")
	}
	h.MixDigest = *dec.MixDigest
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for Header")
	}
	h.Nonce = *dec.Nonce
	return nil
}
