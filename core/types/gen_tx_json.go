// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/EDXFund/MasterChain/common"
)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		AccountNonce uint64          `json:"nonce"    gencodec:"required"`
		Price        *big.Int        `json:"gasPrice" gencodec:"required"`
		GasLimit     uint64          `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		TokenId      uint64          `json:"tokenId"  gencodec:"required"`
		Amount       *big.Int        `json:"value"    gencodec:"required"`
		Payload      []byte          `json:"input"    gencodec:"required"`
		V            *big.Int        `json:"v" gencodec:"required"`
		R            *big.Int        `json:"r" gencodec:"required"`
		S            *big.Int        `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var enc txdata
	enc.AccountNonce = t.AccountNonce
	enc.Price = t.Price
	enc.GasLimit = t.GasLimit
	enc.Recipient = t.Recipient
	enc.TokenId = t.TokenId
	enc.Amount = t.Amount
	enc.Payload = t.Payload
	enc.V = t.V
	enc.R = t.R
	enc.S = t.S
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		AccountNonce *uint64         `json:"nonce"    gencodec:"required"`
		Price        *big.Int        `json:"gasPrice" gencodec:"required"`
		GasLimit     *uint64         `json:"gas"      gencodec:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		TokenId      *uint64         `json:"tokenId"  gencodec:"required"`
		Amount       *big.Int        `json:"value"    gencodec:"required"`
		Payload      []byte          `json:"input"    gencodec:"required"`
		V            *big.Int        `json:"v" gencodec:"required"`
		R            *big.Int        `json:"r" gencodec:"required"`
		S            *big.Int        `json:"s" gencodec:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for txdata")
	}
	t.AccountNonce = *dec.AccountNonce
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = dec.Price
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = *dec.GasLimit
	if dec.Recipient != nil {
		t.Recipient = dec.Recipient
	}
	if dec.TokenId == nil {
		return errors.New("missing required field 'tokenId' for txdata")
	}
	t.TokenId = *dec.TokenId
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = dec.Amount
	if dec.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = dec.Payload
	if dec.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = dec.V
	if dec.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = dec.R
	if dec.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = dec.S
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	return nil
}
